// Automatically generated by MockGen. DO NOT EDIT!
// Source: sh_store.go

package models

import (
	sql "database/sql"
	gomock "github.com/golang/mock/gomock"
)

// Mock of TransactionStore interface
type MockTransactionStore struct {
	ctrl     *gomock.Controller
	recorder *_MockTransactionStoreRecorder
}

// Recorder for MockTransactionStore (not exported)
type _MockTransactionStoreRecorder struct {
	mock *MockTransactionStore
}

func NewMockTransactionStore(ctrl *gomock.Controller) *MockTransactionStore {
	mock := &MockTransactionStore{ctrl: ctrl}
	mock.recorder = &_MockTransactionStoreRecorder{mock}
	return mock
}

func (_m *MockTransactionStore) EXPECT() *_MockTransactionStoreRecorder {
	return _m.recorder
}

func (_m *MockTransactionStore) CreateShTransactionInTx(_param0 *sql.Tx, _param1 *ShTransaction) (*ShTransaction, error) {
	ret := _m.ctrl.Call(_m, "CreateShTransactionInTx", _param0, _param1)
	ret0, _ := ret[0].(*ShTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockTransactionStoreRecorder) CreateShTransactionInTx(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateShTransactionInTx", arg0, arg1)
}

func (_m *MockTransactionStore) AddShTransactionItemInTx(_param0 *sql.Tx, _param1 *ShTransaction, _param2 *ShTransactionItem) (*ShTransactionItem, error) {
	ret := _m.ctrl.Call(_m, "AddShTransactionItemInTx", _param0, _param1, _param2)
	ret0, _ := ret[0].(*ShTransactionItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockTransactionStoreRecorder) AddShTransactionItemInTx(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddShTransactionItemInTx", arg0, arg1, arg2)
}

func (_m *MockTransactionStore) GetShTransactionById(company_id int64, trans_id int64, fetch_items bool) (*ShTransaction, error) {
	ret := _m.ctrl.Call(_m, "GetShTransactionById", company_id, trans_id, fetch_items)
	ret0, _ := ret[0].(*ShTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockTransactionStoreRecorder) GetShTransactionById(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetShTransactionById", arg0, arg1, arg2)
}

func (_m *MockTransactionStore) GetShTransactionByUUIDInTx(_param0 *sql.Tx, _param1 string) (*ShTransaction, error) {
	ret := _m.ctrl.Call(_m, "GetShTransactionByUUIDInTx", _param0, _param1)
	ret0, _ := ret[0].(*ShTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockTransactionStoreRecorder) GetShTransactionByUUIDInTx(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetShTransactionByUUIDInTx", arg0, arg1)
}

func (_m *MockTransactionStore) GetShTransactionSinceTransId(company_id int64, start_id int64) ([]*ShTransaction, error) {
	ret := _m.ctrl.Call(_m, "GetShTransactionSinceTransId", company_id, start_id)
	ret0, _ := ret[0].([]*ShTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockTransactionStoreRecorder) GetShTransactionSinceTransId(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetShTransactionSinceTransId", arg0, arg1)
}

// Mock of ItemStore interface
type MockItemStore struct {
	ctrl     *gomock.Controller
	recorder *_MockItemStoreRecorder
}

// Recorder for MockItemStore (not exported)
type _MockItemStoreRecorder struct {
	mock *MockItemStore
}

func NewMockItemStore(ctrl *gomock.Controller) *MockItemStore {
	mock := &MockItemStore{ctrl: ctrl}
	mock.recorder = &_MockItemStoreRecorder{mock}
	return mock
}

func (_m *MockItemStore) EXPECT() *_MockItemStoreRecorder {
	return _m.recorder
}

func (_m *MockItemStore) CreateItem(_param0 *ShItem) (*ShItem, error) {
	ret := _m.ctrl.Call(_m, "CreateItem", _param0)
	ret0, _ := ret[0].(*ShItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockItemStoreRecorder) CreateItem(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateItem", arg0)
}

func (_m *MockItemStore) CreateItemInTx(_param0 *sql.Tx, _param1 *ShItem) (*ShItem, error) {
	ret := _m.ctrl.Call(_m, "CreateItemInTx", _param0, _param1)
	ret0, _ := ret[0].(*ShItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockItemStoreRecorder) CreateItemInTx(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateItemInTx", arg0, arg1)
}

func (_m *MockItemStore) UpdateItemInTx(_param0 *sql.Tx, _param1 *ShItem) (*ShItem, error) {
	ret := _m.ctrl.Call(_m, "UpdateItemInTx", _param0, _param1)
	ret0, _ := ret[0].(*ShItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockItemStoreRecorder) UpdateItemInTx(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateItemInTx", arg0, arg1)
}

func (_m *MockItemStore) GetItemById(_param0 int64) (*ShItem, error) {
	ret := _m.ctrl.Call(_m, "GetItemById", _param0)
	ret0, _ := ret[0].(*ShItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockItemStoreRecorder) GetItemById(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetItemById", arg0)
}

func (_m *MockItemStore) GetItemByUUIDInTx(_param0 *sql.Tx, _param1 string) (*ShItem, error) {
	ret := _m.ctrl.Call(_m, "GetItemByUUIDInTx", _param0, _param1)
	ret0, _ := ret[0].(*ShItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockItemStoreRecorder) GetItemByUUIDInTx(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetItemByUUIDInTx", arg0, arg1)
}

func (_m *MockItemStore) GetItemByIdInTx(_param0 *sql.Tx, _param1 int64) (*ShItem, error) {
	ret := _m.ctrl.Call(_m, "GetItemByIdInTx", _param0, _param1)
	ret0, _ := ret[0].(*ShItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockItemStoreRecorder) GetItemByIdInTx(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetItemByIdInTx", arg0, arg1)
}

// Mock of BranchStore interface
type MockBranchStore struct {
	ctrl     *gomock.Controller
	recorder *_MockBranchStoreRecorder
}

// Recorder for MockBranchStore (not exported)
type _MockBranchStoreRecorder struct {
	mock *MockBranchStore
}

func NewMockBranchStore(ctrl *gomock.Controller) *MockBranchStore {
	mock := &MockBranchStore{ctrl: ctrl}
	mock.recorder = &_MockBranchStoreRecorder{mock}
	return mock
}

func (_m *MockBranchStore) EXPECT() *_MockBranchStoreRecorder {
	return _m.recorder
}

func (_m *MockBranchStore) CreateBranch(_param0 *ShBranch) (*ShBranch, error) {
	ret := _m.ctrl.Call(_m, "CreateBranch", _param0)
	ret0, _ := ret[0].(*ShBranch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockBranchStoreRecorder) CreateBranch(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateBranch", arg0)
}

func (_m *MockBranchStore) CreateBranchInTx(_param0 *sql.Tx, _param1 *ShBranch) (*ShBranch, error) {
	ret := _m.ctrl.Call(_m, "CreateBranchInTx", _param0, _param1)
	ret0, _ := ret[0].(*ShBranch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockBranchStoreRecorder) CreateBranchInTx(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateBranchInTx", arg0, arg1)
}

func (_m *MockBranchStore) UpdateBranchInTx(_param0 *sql.Tx, _param1 *ShBranch) (*ShBranch, error) {
	ret := _m.ctrl.Call(_m, "UpdateBranchInTx", _param0, _param1)
	ret0, _ := ret[0].(*ShBranch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockBranchStoreRecorder) UpdateBranchInTx(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateBranchInTx", arg0, arg1)
}

func (_m *MockBranchStore) GetBranchByUUIDInTx(_param0 *sql.Tx, _param1 string) (*ShBranch, error) {
	ret := _m.ctrl.Call(_m, "GetBranchByUUIDInTx", _param0, _param1)
	ret0, _ := ret[0].(*ShBranch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockBranchStoreRecorder) GetBranchByUUIDInTx(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetBranchByUUIDInTx", arg0, arg1)
}

func (_m *MockBranchStore) GetBranchById(_param0 int64) (*ShBranch, error) {
	ret := _m.ctrl.Call(_m, "GetBranchById", _param0)
	ret0, _ := ret[0].(*ShBranch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockBranchStoreRecorder) GetBranchById(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetBranchById", arg0)
}

func (_m *MockBranchStore) GetBranchByIdInTx(_param0 *sql.Tx, _param1 int64) (*ShBranch, error) {
	ret := _m.ctrl.Call(_m, "GetBranchByIdInTx", _param0, _param1)
	ret0, _ := ret[0].(*ShBranch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockBranchStoreRecorder) GetBranchByIdInTx(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetBranchByIdInTx", arg0, arg1)
}

// Mock of BranchItemStore interface
type MockBranchItemStore struct {
	ctrl     *gomock.Controller
	recorder *_MockBranchItemStoreRecorder
}

// Recorder for MockBranchItemStore (not exported)
type _MockBranchItemStoreRecorder struct {
	mock *MockBranchItemStore
}

func NewMockBranchItemStore(ctrl *gomock.Controller) *MockBranchItemStore {
	mock := &MockBranchItemStore{ctrl: ctrl}
	mock.recorder = &_MockBranchItemStoreRecorder{mock}
	return mock
}

func (_m *MockBranchItemStore) EXPECT() *_MockBranchItemStoreRecorder {
	return _m.recorder
}

func (_m *MockBranchItemStore) AddItemToBranch(_param0 *ShBranchItem) (*ShBranchItem, error) {
	ret := _m.ctrl.Call(_m, "AddItemToBranch", _param0)
	ret0, _ := ret[0].(*ShBranchItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockBranchItemStoreRecorder) AddItemToBranch(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddItemToBranch", arg0)
}

func (_m *MockBranchItemStore) AddItemToBranchInTx(_param0 *sql.Tx, _param1 *ShBranchItem) (*ShBranchItem, error) {
	ret := _m.ctrl.Call(_m, "AddItemToBranchInTx", _param0, _param1)
	ret0, _ := ret[0].(*ShBranchItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockBranchItemStoreRecorder) AddItemToBranchInTx(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddItemToBranchInTx", arg0, arg1)
}

func (_m *MockBranchItemStore) GetBranchItem(branch_id int64, item_id int64) (*ShBranchItem, error) {
	ret := _m.ctrl.Call(_m, "GetBranchItem", branch_id, item_id)
	ret0, _ := ret[0].(*ShBranchItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockBranchItemStoreRecorder) GetBranchItem(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetBranchItem", arg0, arg1)
}

func (_m *MockBranchItemStore) GetBranchItemInTx(tnx *sql.Tx, branch_id int64, item_id int64) (*ShBranchItem, error) {
	ret := _m.ctrl.Call(_m, "GetBranchItemInTx", tnx, branch_id, item_id)
	ret0, _ := ret[0].(*ShBranchItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockBranchItemStoreRecorder) GetBranchItemInTx(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetBranchItemInTx", arg0, arg1, arg2)
}

func (_m *MockBranchItemStore) UpdateBranchItemInTx(_param0 *sql.Tx, _param1 *ShBranchItem) (*ShBranchItem, error) {
	ret := _m.ctrl.Call(_m, "UpdateBranchItemInTx", _param0, _param1)
	ret0, _ := ret[0].(*ShBranchItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockBranchItemStoreRecorder) UpdateBranchItemInTx(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateBranchItemInTx", arg0, arg1)
}

// Mock of CompanyStore interface
type MockCompanyStore struct {
	ctrl     *gomock.Controller
	recorder *_MockCompanyStoreRecorder
}

// Recorder for MockCompanyStore (not exported)
type _MockCompanyStoreRecorder struct {
	mock *MockCompanyStore
}

func NewMockCompanyStore(ctrl *gomock.Controller) *MockCompanyStore {
	mock := &MockCompanyStore{ctrl: ctrl}
	mock.recorder = &_MockCompanyStoreRecorder{mock}
	return mock
}

func (_m *MockCompanyStore) EXPECT() *_MockCompanyStoreRecorder {
	return _m.recorder
}

func (_m *MockCompanyStore) CreateCompany(u *User, c *Company) (*Company, error) {
	ret := _m.ctrl.Call(_m, "CreateCompany", u, c)
	ret0, _ := ret[0].(*Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCompanyStoreRecorder) CreateCompany(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateCompany", arg0, arg1)
}

func (_m *MockCompanyStore) CreateCompanyInTx(_param0 *sql.Tx, _param1 *User, _param2 *Company) (*Company, error) {
	ret := _m.ctrl.Call(_m, "CreateCompanyInTx", _param0, _param1, _param2)
	ret0, _ := ret[0].(*Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCompanyStoreRecorder) CreateCompanyInTx(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateCompanyInTx", arg0, arg1, arg2)
}

func (_m *MockCompanyStore) GetCompanyById(_param0 int64) (*Company, error) {
	ret := _m.ctrl.Call(_m, "GetCompanyById", _param0)
	ret0, _ := ret[0].(*Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCompanyStoreRecorder) GetCompanyById(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetCompanyById", arg0)
}

func (_m *MockCompanyStore) UpdateCompanyInTx(_param0 *sql.Tx, _param1 *Company) (*Company, error) {
	ret := _m.ctrl.Call(_m, "UpdateCompanyInTx", _param0, _param1)
	ret0, _ := ret[0].(*Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCompanyStoreRecorder) UpdateCompanyInTx(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateCompanyInTx", arg0, arg1)
}

// Mock of UserStore interface
type MockUserStore struct {
	ctrl     *gomock.Controller
	recorder *_MockUserStoreRecorder
}

// Recorder for MockUserStore (not exported)
type _MockUserStoreRecorder struct {
	mock *MockUserStore
}

func NewMockUserStore(ctrl *gomock.Controller) *MockUserStore {
	mock := &MockUserStore{ctrl: ctrl}
	mock.recorder = &_MockUserStoreRecorder{mock}
	return mock
}

func (_m *MockUserStore) EXPECT() *_MockUserStoreRecorder {
	return _m.recorder
}

func (_m *MockUserStore) CreateUserInTx(tnx *sql.Tx, u *User) (*User, error) {
	ret := _m.ctrl.Call(_m, "CreateUserInTx", tnx, u)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockUserStoreRecorder) CreateUserInTx(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateUserInTx", arg0, arg1)
}

func (_m *MockUserStore) FindUserById(_param0 int64) (*User, error) {
	ret := _m.ctrl.Call(_m, "FindUserById", _param0)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockUserStoreRecorder) FindUserById(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FindUserById", arg0)
}

func (_m *MockUserStore) FindUserWithProviderIdInTx(tnx *sql.Tx, provider_id int64, provider_user_id string) (*User, error) {
	ret := _m.ctrl.Call(_m, "FindUserWithProviderIdInTx", tnx, provider_id, provider_user_id)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockUserStoreRecorder) FindUserWithProviderIdInTx(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FindUserWithProviderIdInTx", arg0, arg1, arg2)
}

func (_m *MockUserStore) UpdateUserInTx(_param0 *sql.Tx, _param1 *User) (*User, error) {
	ret := _m.ctrl.Call(_m, "UpdateUserInTx", _param0, _param1)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockUserStoreRecorder) UpdateUserInTx(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateUserInTx", arg0, arg1)
}

func (_m *MockUserStore) SetUserPermission(_param0 *UserPermission) (*UserPermission, error) {
	ret := _m.ctrl.Call(_m, "SetUserPermission", _param0)
	ret0, _ := ret[0].(*UserPermission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockUserStoreRecorder) SetUserPermission(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetUserPermission", arg0)
}

func (_m *MockUserStore) RemoveUserFromCompanyInTx(tnx *sql.Tx, user_id int64, company_id int64) error {
	ret := _m.ctrl.Call(_m, "RemoveUserFromCompanyInTx", tnx, user_id, company_id)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockUserStoreRecorder) RemoveUserFromCompanyInTx(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RemoveUserFromCompanyInTx", arg0, arg1, arg2)
}

func (_m *MockUserStore) SetUserPermissionInTx(_param0 *sql.Tx, _param1 *UserPermission) (*UserPermission, error) {
	ret := _m.ctrl.Call(_m, "SetUserPermissionInTx", _param0, _param1)
	ret0, _ := ret[0].(*UserPermission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockUserStoreRecorder) SetUserPermissionInTx(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetUserPermissionInTx", arg0, arg1)
}

func (_m *MockUserStore) GetUserPermission(u *User, company_id int64) (*UserPermission, error) {
	ret := _m.ctrl.Call(_m, "GetUserPermission", u, company_id)
	ret0, _ := ret[0].(*UserPermission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockUserStoreRecorder) GetUserPermission(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetUserPermission", arg0, arg1)
}

func (_m *MockUserStore) GetUserCompanyPermissions(u *User) ([]*Pair_Company_UserPermission, error) {
	ret := _m.ctrl.Call(_m, "GetUserCompanyPermissions", u)
	ret0, _ := ret[0].([]*Pair_Company_UserPermission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockUserStoreRecorder) GetUserCompanyPermissions(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetUserCompanyPermissions", arg0)
}

func (_m *MockUserStore) GetCompanyMembersPermissions(c *Company) ([]*Pair_User_UserPermission, error) {
	ret := _m.ctrl.Call(_m, "GetCompanyMembersPermissions", c)
	ret0, _ := ret[0].([]*Pair_User_UserPermission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockUserStoreRecorder) GetCompanyMembersPermissions(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetCompanyMembersPermissions", arg0)
}

// Mock of RevisionStore interface
type MockRevisionStore struct {
	ctrl     *gomock.Controller
	recorder *_MockRevisionStoreRecorder
}

// Recorder for MockRevisionStore (not exported)
type _MockRevisionStoreRecorder struct {
	mock *MockRevisionStore
}

func NewMockRevisionStore(ctrl *gomock.Controller) *MockRevisionStore {
	mock := &MockRevisionStore{ctrl: ctrl}
	mock.recorder = &_MockRevisionStoreRecorder{mock}
	return mock
}

func (_m *MockRevisionStore) EXPECT() *_MockRevisionStoreRecorder {
	return _m.recorder
}

func (_m *MockRevisionStore) AddEntityRevisionInTx(_param0 *sql.Tx, _param1 *ShEntityRevision) (*ShEntityRevision, error) {
	ret := _m.ctrl.Call(_m, "AddEntityRevisionInTx", _param0, _param1)
	ret0, _ := ret[0].(*ShEntityRevision)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockRevisionStoreRecorder) AddEntityRevisionInTx(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddEntityRevisionInTx", arg0, arg1)
}

func (_m *MockRevisionStore) GetRevisionsSince(start_from *ShEntityRevision) (int64, []*ShEntityRevision, error) {
	ret := _m.ctrl.Call(_m, "GetRevisionsSince", start_from)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].([]*ShEntityRevision)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockRevisionStoreRecorder) GetRevisionsSince(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetRevisionsSince", arg0)
}

// Mock of Source interface
type MockSource struct {
	ctrl     *gomock.Controller
	recorder *_MockSourceRecorder
}

// Recorder for MockSource (not exported)
type _MockSourceRecorder struct {
	mock *MockSource
}

func NewMockSource(ctrl *gomock.Controller) *MockSource {
	mock := &MockSource{ctrl: ctrl}
	mock.recorder = &_MockSourceRecorder{mock}
	return mock
}

func (_m *MockSource) EXPECT() *_MockSourceRecorder {
	return _m.recorder
}

func (_m *MockSource) GetDataStore() DataStore {
	ret := _m.ctrl.Call(_m, "GetDataStore")
	ret0, _ := ret[0].(DataStore)
	return ret0
}

func (_mr *_MockSourceRecorder) GetDataStore() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetDataStore")
}

func (_m *MockSource) Begin() (*sql.Tx, error) {
	ret := _m.ctrl.Call(_m, "Begin")
	ret0, _ := ret[0].(*sql.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSourceRecorder) Begin() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Begin")
}

// Mock of CategoryStore interface
type MockCategoryStore struct {
	ctrl     *gomock.Controller
	recorder *_MockCategoryStoreRecorder
}

// Recorder for MockCategoryStore (not exported)
type _MockCategoryStoreRecorder struct {
	mock *MockCategoryStore
}

func NewMockCategoryStore(ctrl *gomock.Controller) *MockCategoryStore {
	mock := &MockCategoryStore{ctrl: ctrl}
	mock.recorder = &_MockCategoryStoreRecorder{mock}
	return mock
}

func (_m *MockCategoryStore) EXPECT() *_MockCategoryStoreRecorder {
	return _m.recorder
}

func (_m *MockCategoryStore) CreateCategoryInTx(_param0 *sql.Tx, _param1 *ShCategory) (*ShCategory, error) {
	ret := _m.ctrl.Call(_m, "CreateCategoryInTx", _param0, _param1)
	ret0, _ := ret[0].(*ShCategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCategoryStoreRecorder) CreateCategoryInTx(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateCategoryInTx", arg0, arg1)
}

func (_m *MockCategoryStore) GetCategoryById(_param0 int64) (*ShCategory, error) {
	ret := _m.ctrl.Call(_m, "GetCategoryById", _param0)
	ret0, _ := ret[0].(*ShCategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCategoryStoreRecorder) GetCategoryById(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetCategoryById", arg0)
}

func (_m *MockCategoryStore) GetCategoryByIdInTx(_param0 *sql.Tx, _param1 int64) (*ShCategory, error) {
	ret := _m.ctrl.Call(_m, "GetCategoryByIdInTx", _param0, _param1)
	ret0, _ := ret[0].(*ShCategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCategoryStoreRecorder) GetCategoryByIdInTx(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetCategoryByIdInTx", arg0, arg1)
}

func (_m *MockCategoryStore) GetCategoryByUUIDInTx(_param0 *sql.Tx, _param1 string) (*ShCategory, error) {
	ret := _m.ctrl.Call(_m, "GetCategoryByUUIDInTx", _param0, _param1)
	ret0, _ := ret[0].(*ShCategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCategoryStoreRecorder) GetCategoryByUUIDInTx(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetCategoryByUUIDInTx", arg0, arg1)
}

func (_m *MockCategoryStore) UpdateCategoryInTx(_param0 *sql.Tx, _param1 *ShCategory) (*ShCategory, error) {
	ret := _m.ctrl.Call(_m, "UpdateCategoryInTx", _param0, _param1)
	ret0, _ := ret[0].(*ShCategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCategoryStoreRecorder) UpdateCategoryInTx(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateCategoryInTx", arg0, arg1)
}

func (_m *MockCategoryStore) DeleteCategoryInTx(_param0 *sql.Tx, _param1 int64) error {
	ret := _m.ctrl.Call(_m, "DeleteCategoryInTx", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockCategoryStoreRecorder) DeleteCategoryInTx(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteCategoryInTx", arg0, arg1)
}

// Mock of BranchCategoryStore interface
type MockBranchCategoryStore struct {
	ctrl     *gomock.Controller
	recorder *_MockBranchCategoryStoreRecorder
}

// Recorder for MockBranchCategoryStore (not exported)
type _MockBranchCategoryStoreRecorder struct {
	mock *MockBranchCategoryStore
}

func NewMockBranchCategoryStore(ctrl *gomock.Controller) *MockBranchCategoryStore {
	mock := &MockBranchCategoryStore{ctrl: ctrl}
	mock.recorder = &_MockBranchCategoryStoreRecorder{mock}
	return mock
}

func (_m *MockBranchCategoryStore) EXPECT() *_MockBranchCategoryStoreRecorder {
	return _m.recorder
}

func (_m *MockBranchCategoryStore) AddCategoryToBranchInTx(_param0 *sql.Tx, _param1 *ShBranchCategory) (*ShBranchCategory, error) {
	ret := _m.ctrl.Call(_m, "AddCategoryToBranchInTx", _param0, _param1)
	ret0, _ := ret[0].(*ShBranchCategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockBranchCategoryStoreRecorder) AddCategoryToBranchInTx(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddCategoryToBranchInTx", arg0, arg1)
}

func (_m *MockBranchCategoryStore) GetBranchCategory(branch_id int64, category_id int64) (*ShBranchCategory, error) {
	ret := _m.ctrl.Call(_m, "GetBranchCategory", branch_id, category_id)
	ret0, _ := ret[0].(*ShBranchCategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockBranchCategoryStoreRecorder) GetBranchCategory(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetBranchCategory", arg0, arg1)
}

func (_m *MockBranchCategoryStore) GetBranchCategoryInTx(tnx *sql.Tx, branch_id int64, category_id int64) (*ShBranchCategory, error) {
	ret := _m.ctrl.Call(_m, "GetBranchCategoryInTx", tnx, branch_id, category_id)
	ret0, _ := ret[0].(*ShBranchCategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockBranchCategoryStoreRecorder) GetBranchCategoryInTx(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetBranchCategoryInTx", arg0, arg1, arg2)
}

func (_m *MockBranchCategoryStore) DeleteBranchCategoryInTx(tnx *sql.Tx, branch_id int64, category_id int64) error {
	ret := _m.ctrl.Call(_m, "DeleteBranchCategoryInTx", tnx, branch_id, category_id)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockBranchCategoryStoreRecorder) DeleteBranchCategoryInTx(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteBranchCategoryInTx", arg0, arg1, arg2)
}

// Mock of ShStore interface
type MockShStore struct {
	ctrl     *gomock.Controller
	recorder *_MockShStoreRecorder
}

// Recorder for MockShStore (not exported)
type _MockShStoreRecorder struct {
	mock *MockShStore
}

func NewMockShStore(ctrl *gomock.Controller) *MockShStore {
	mock := &MockShStore{ctrl: ctrl}
	mock.recorder = &_MockShStoreRecorder{mock}
	return mock
}

func (_m *MockShStore) EXPECT() *_MockShStoreRecorder {
	return _m.recorder
}

func (_m *MockShStore) CreateShTransactionInTx(_param0 *sql.Tx, _param1 *ShTransaction) (*ShTransaction, error) {
	ret := _m.ctrl.Call(_m, "CreateShTransactionInTx", _param0, _param1)
	ret0, _ := ret[0].(*ShTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockShStoreRecorder) CreateShTransactionInTx(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateShTransactionInTx", arg0, arg1)
}

func (_m *MockShStore) AddShTransactionItemInTx(_param0 *sql.Tx, _param1 *ShTransaction, _param2 *ShTransactionItem) (*ShTransactionItem, error) {
	ret := _m.ctrl.Call(_m, "AddShTransactionItemInTx", _param0, _param1, _param2)
	ret0, _ := ret[0].(*ShTransactionItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockShStoreRecorder) AddShTransactionItemInTx(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddShTransactionItemInTx", arg0, arg1, arg2)
}

func (_m *MockShStore) GetShTransactionById(company_id int64, trans_id int64, fetch_items bool) (*ShTransaction, error) {
	ret := _m.ctrl.Call(_m, "GetShTransactionById", company_id, trans_id, fetch_items)
	ret0, _ := ret[0].(*ShTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockShStoreRecorder) GetShTransactionById(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetShTransactionById", arg0, arg1, arg2)
}

func (_m *MockShStore) GetShTransactionByUUIDInTx(_param0 *sql.Tx, _param1 string) (*ShTransaction, error) {
	ret := _m.ctrl.Call(_m, "GetShTransactionByUUIDInTx", _param0, _param1)
	ret0, _ := ret[0].(*ShTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockShStoreRecorder) GetShTransactionByUUIDInTx(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetShTransactionByUUIDInTx", arg0, arg1)
}

func (_m *MockShStore) GetShTransactionSinceTransId(company_id int64, start_id int64) ([]*ShTransaction, error) {
	ret := _m.ctrl.Call(_m, "GetShTransactionSinceTransId", company_id, start_id)
	ret0, _ := ret[0].([]*ShTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockShStoreRecorder) GetShTransactionSinceTransId(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetShTransactionSinceTransId", arg0, arg1)
}

func (_m *MockShStore) CreateItem(_param0 *ShItem) (*ShItem, error) {
	ret := _m.ctrl.Call(_m, "CreateItem", _param0)
	ret0, _ := ret[0].(*ShItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockShStoreRecorder) CreateItem(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateItem", arg0)
}

func (_m *MockShStore) CreateItemInTx(_param0 *sql.Tx, _param1 *ShItem) (*ShItem, error) {
	ret := _m.ctrl.Call(_m, "CreateItemInTx", _param0, _param1)
	ret0, _ := ret[0].(*ShItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockShStoreRecorder) CreateItemInTx(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateItemInTx", arg0, arg1)
}

func (_m *MockShStore) UpdateItemInTx(_param0 *sql.Tx, _param1 *ShItem) (*ShItem, error) {
	ret := _m.ctrl.Call(_m, "UpdateItemInTx", _param0, _param1)
	ret0, _ := ret[0].(*ShItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockShStoreRecorder) UpdateItemInTx(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateItemInTx", arg0, arg1)
}

func (_m *MockShStore) GetItemById(_param0 int64) (*ShItem, error) {
	ret := _m.ctrl.Call(_m, "GetItemById", _param0)
	ret0, _ := ret[0].(*ShItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockShStoreRecorder) GetItemById(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetItemById", arg0)
}

func (_m *MockShStore) GetItemByUUIDInTx(_param0 *sql.Tx, _param1 string) (*ShItem, error) {
	ret := _m.ctrl.Call(_m, "GetItemByUUIDInTx", _param0, _param1)
	ret0, _ := ret[0].(*ShItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockShStoreRecorder) GetItemByUUIDInTx(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetItemByUUIDInTx", arg0, arg1)
}

func (_m *MockShStore) GetItemByIdInTx(_param0 *sql.Tx, _param1 int64) (*ShItem, error) {
	ret := _m.ctrl.Call(_m, "GetItemByIdInTx", _param0, _param1)
	ret0, _ := ret[0].(*ShItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockShStoreRecorder) GetItemByIdInTx(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetItemByIdInTx", arg0, arg1)
}

func (_m *MockShStore) CreateCategoryInTx(_param0 *sql.Tx, _param1 *ShCategory) (*ShCategory, error) {
	ret := _m.ctrl.Call(_m, "CreateCategoryInTx", _param0, _param1)
	ret0, _ := ret[0].(*ShCategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockShStoreRecorder) CreateCategoryInTx(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateCategoryInTx", arg0, arg1)
}

func (_m *MockShStore) GetCategoryById(_param0 int64) (*ShCategory, error) {
	ret := _m.ctrl.Call(_m, "GetCategoryById", _param0)
	ret0, _ := ret[0].(*ShCategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockShStoreRecorder) GetCategoryById(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetCategoryById", arg0)
}

func (_m *MockShStore) GetCategoryByIdInTx(_param0 *sql.Tx, _param1 int64) (*ShCategory, error) {
	ret := _m.ctrl.Call(_m, "GetCategoryByIdInTx", _param0, _param1)
	ret0, _ := ret[0].(*ShCategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockShStoreRecorder) GetCategoryByIdInTx(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetCategoryByIdInTx", arg0, arg1)
}

func (_m *MockShStore) GetCategoryByUUIDInTx(_param0 *sql.Tx, _param1 string) (*ShCategory, error) {
	ret := _m.ctrl.Call(_m, "GetCategoryByUUIDInTx", _param0, _param1)
	ret0, _ := ret[0].(*ShCategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockShStoreRecorder) GetCategoryByUUIDInTx(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetCategoryByUUIDInTx", arg0, arg1)
}

func (_m *MockShStore) UpdateCategoryInTx(_param0 *sql.Tx, _param1 *ShCategory) (*ShCategory, error) {
	ret := _m.ctrl.Call(_m, "UpdateCategoryInTx", _param0, _param1)
	ret0, _ := ret[0].(*ShCategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockShStoreRecorder) UpdateCategoryInTx(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateCategoryInTx", arg0, arg1)
}

func (_m *MockShStore) DeleteCategoryInTx(_param0 *sql.Tx, _param1 int64) error {
	ret := _m.ctrl.Call(_m, "DeleteCategoryInTx", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockShStoreRecorder) DeleteCategoryInTx(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteCategoryInTx", arg0, arg1)
}

func (_m *MockShStore) AddCategoryToBranchInTx(_param0 *sql.Tx, _param1 *ShBranchCategory) (*ShBranchCategory, error) {
	ret := _m.ctrl.Call(_m, "AddCategoryToBranchInTx", _param0, _param1)
	ret0, _ := ret[0].(*ShBranchCategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockShStoreRecorder) AddCategoryToBranchInTx(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddCategoryToBranchInTx", arg0, arg1)
}

func (_m *MockShStore) GetBranchCategory(branch_id int64, category_id int64) (*ShBranchCategory, error) {
	ret := _m.ctrl.Call(_m, "GetBranchCategory", branch_id, category_id)
	ret0, _ := ret[0].(*ShBranchCategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockShStoreRecorder) GetBranchCategory(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetBranchCategory", arg0, arg1)
}

func (_m *MockShStore) GetBranchCategoryInTx(tnx *sql.Tx, branch_id int64, category_id int64) (*ShBranchCategory, error) {
	ret := _m.ctrl.Call(_m, "GetBranchCategoryInTx", tnx, branch_id, category_id)
	ret0, _ := ret[0].(*ShBranchCategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockShStoreRecorder) GetBranchCategoryInTx(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetBranchCategoryInTx", arg0, arg1, arg2)
}

func (_m *MockShStore) DeleteBranchCategoryInTx(tnx *sql.Tx, branch_id int64, category_id int64) error {
	ret := _m.ctrl.Call(_m, "DeleteBranchCategoryInTx", tnx, branch_id, category_id)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockShStoreRecorder) DeleteBranchCategoryInTx(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteBranchCategoryInTx", arg0, arg1, arg2)
}

func (_m *MockShStore) CreateBranch(_param0 *ShBranch) (*ShBranch, error) {
	ret := _m.ctrl.Call(_m, "CreateBranch", _param0)
	ret0, _ := ret[0].(*ShBranch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockShStoreRecorder) CreateBranch(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateBranch", arg0)
}

func (_m *MockShStore) CreateBranchInTx(_param0 *sql.Tx, _param1 *ShBranch) (*ShBranch, error) {
	ret := _m.ctrl.Call(_m, "CreateBranchInTx", _param0, _param1)
	ret0, _ := ret[0].(*ShBranch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockShStoreRecorder) CreateBranchInTx(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateBranchInTx", arg0, arg1)
}

func (_m *MockShStore) UpdateBranchInTx(_param0 *sql.Tx, _param1 *ShBranch) (*ShBranch, error) {
	ret := _m.ctrl.Call(_m, "UpdateBranchInTx", _param0, _param1)
	ret0, _ := ret[0].(*ShBranch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockShStoreRecorder) UpdateBranchInTx(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateBranchInTx", arg0, arg1)
}

func (_m *MockShStore) GetBranchByUUIDInTx(_param0 *sql.Tx, _param1 string) (*ShBranch, error) {
	ret := _m.ctrl.Call(_m, "GetBranchByUUIDInTx", _param0, _param1)
	ret0, _ := ret[0].(*ShBranch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockShStoreRecorder) GetBranchByUUIDInTx(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetBranchByUUIDInTx", arg0, arg1)
}

func (_m *MockShStore) GetBranchById(_param0 int64) (*ShBranch, error) {
	ret := _m.ctrl.Call(_m, "GetBranchById", _param0)
	ret0, _ := ret[0].(*ShBranch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockShStoreRecorder) GetBranchById(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetBranchById", arg0)
}

func (_m *MockShStore) GetBranchByIdInTx(_param0 *sql.Tx, _param1 int64) (*ShBranch, error) {
	ret := _m.ctrl.Call(_m, "GetBranchByIdInTx", _param0, _param1)
	ret0, _ := ret[0].(*ShBranch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockShStoreRecorder) GetBranchByIdInTx(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetBranchByIdInTx", arg0, arg1)
}

func (_m *MockShStore) AddItemToBranch(_param0 *ShBranchItem) (*ShBranchItem, error) {
	ret := _m.ctrl.Call(_m, "AddItemToBranch", _param0)
	ret0, _ := ret[0].(*ShBranchItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockShStoreRecorder) AddItemToBranch(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddItemToBranch", arg0)
}

func (_m *MockShStore) AddItemToBranchInTx(_param0 *sql.Tx, _param1 *ShBranchItem) (*ShBranchItem, error) {
	ret := _m.ctrl.Call(_m, "AddItemToBranchInTx", _param0, _param1)
	ret0, _ := ret[0].(*ShBranchItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockShStoreRecorder) AddItemToBranchInTx(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddItemToBranchInTx", arg0, arg1)
}

func (_m *MockShStore) GetBranchItem(branch_id int64, item_id int64) (*ShBranchItem, error) {
	ret := _m.ctrl.Call(_m, "GetBranchItem", branch_id, item_id)
	ret0, _ := ret[0].(*ShBranchItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockShStoreRecorder) GetBranchItem(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetBranchItem", arg0, arg1)
}

func (_m *MockShStore) GetBranchItemInTx(tnx *sql.Tx, branch_id int64, item_id int64) (*ShBranchItem, error) {
	ret := _m.ctrl.Call(_m, "GetBranchItemInTx", tnx, branch_id, item_id)
	ret0, _ := ret[0].(*ShBranchItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockShStoreRecorder) GetBranchItemInTx(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetBranchItemInTx", arg0, arg1, arg2)
}

func (_m *MockShStore) UpdateBranchItemInTx(_param0 *sql.Tx, _param1 *ShBranchItem) (*ShBranchItem, error) {
	ret := _m.ctrl.Call(_m, "UpdateBranchItemInTx", _param0, _param1)
	ret0, _ := ret[0].(*ShBranchItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockShStoreRecorder) UpdateBranchItemInTx(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateBranchItemInTx", arg0, arg1)
}

func (_m *MockShStore) CreateCompany(u *User, c *Company) (*Company, error) {
	ret := _m.ctrl.Call(_m, "CreateCompany", u, c)
	ret0, _ := ret[0].(*Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockShStoreRecorder) CreateCompany(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateCompany", arg0, arg1)
}

func (_m *MockShStore) CreateCompanyInTx(_param0 *sql.Tx, _param1 *User, _param2 *Company) (*Company, error) {
	ret := _m.ctrl.Call(_m, "CreateCompanyInTx", _param0, _param1, _param2)
	ret0, _ := ret[0].(*Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockShStoreRecorder) CreateCompanyInTx(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateCompanyInTx", arg0, arg1, arg2)
}

func (_m *MockShStore) GetCompanyById(_param0 int64) (*Company, error) {
	ret := _m.ctrl.Call(_m, "GetCompanyById", _param0)
	ret0, _ := ret[0].(*Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockShStoreRecorder) GetCompanyById(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetCompanyById", arg0)
}

func (_m *MockShStore) UpdateCompanyInTx(_param0 *sql.Tx, _param1 *Company) (*Company, error) {
	ret := _m.ctrl.Call(_m, "UpdateCompanyInTx", _param0, _param1)
	ret0, _ := ret[0].(*Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockShStoreRecorder) UpdateCompanyInTx(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateCompanyInTx", arg0, arg1)
}

func (_m *MockShStore) CreateUserInTx(tnx *sql.Tx, u *User) (*User, error) {
	ret := _m.ctrl.Call(_m, "CreateUserInTx", tnx, u)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockShStoreRecorder) CreateUserInTx(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateUserInTx", arg0, arg1)
}

func (_m *MockShStore) FindUserById(_param0 int64) (*User, error) {
	ret := _m.ctrl.Call(_m, "FindUserById", _param0)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockShStoreRecorder) FindUserById(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FindUserById", arg0)
}

func (_m *MockShStore) FindUserWithProviderIdInTx(tnx *sql.Tx, provider_id int64, provider_user_id string) (*User, error) {
	ret := _m.ctrl.Call(_m, "FindUserWithProviderIdInTx", tnx, provider_id, provider_user_id)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockShStoreRecorder) FindUserWithProviderIdInTx(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FindUserWithProviderIdInTx", arg0, arg1, arg2)
}

func (_m *MockShStore) UpdateUserInTx(_param0 *sql.Tx, _param1 *User) (*User, error) {
	ret := _m.ctrl.Call(_m, "UpdateUserInTx", _param0, _param1)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockShStoreRecorder) UpdateUserInTx(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateUserInTx", arg0, arg1)
}

func (_m *MockShStore) SetUserPermission(_param0 *UserPermission) (*UserPermission, error) {
	ret := _m.ctrl.Call(_m, "SetUserPermission", _param0)
	ret0, _ := ret[0].(*UserPermission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockShStoreRecorder) SetUserPermission(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetUserPermission", arg0)
}

func (_m *MockShStore) RemoveUserFromCompanyInTx(tnx *sql.Tx, user_id int64, company_id int64) error {
	ret := _m.ctrl.Call(_m, "RemoveUserFromCompanyInTx", tnx, user_id, company_id)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockShStoreRecorder) RemoveUserFromCompanyInTx(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RemoveUserFromCompanyInTx", arg0, arg1, arg2)
}

func (_m *MockShStore) SetUserPermissionInTx(_param0 *sql.Tx, _param1 *UserPermission) (*UserPermission, error) {
	ret := _m.ctrl.Call(_m, "SetUserPermissionInTx", _param0, _param1)
	ret0, _ := ret[0].(*UserPermission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockShStoreRecorder) SetUserPermissionInTx(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetUserPermissionInTx", arg0, arg1)
}

func (_m *MockShStore) GetUserPermission(u *User, company_id int64) (*UserPermission, error) {
	ret := _m.ctrl.Call(_m, "GetUserPermission", u, company_id)
	ret0, _ := ret[0].(*UserPermission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockShStoreRecorder) GetUserPermission(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetUserPermission", arg0, arg1)
}

func (_m *MockShStore) GetUserCompanyPermissions(u *User) ([]*Pair_Company_UserPermission, error) {
	ret := _m.ctrl.Call(_m, "GetUserCompanyPermissions", u)
	ret0, _ := ret[0].([]*Pair_Company_UserPermission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockShStoreRecorder) GetUserCompanyPermissions(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetUserCompanyPermissions", arg0)
}

func (_m *MockShStore) GetCompanyMembersPermissions(c *Company) ([]*Pair_User_UserPermission, error) {
	ret := _m.ctrl.Call(_m, "GetCompanyMembersPermissions", c)
	ret0, _ := ret[0].([]*Pair_User_UserPermission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockShStoreRecorder) GetCompanyMembersPermissions(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetCompanyMembersPermissions", arg0)
}

func (_m *MockShStore) AddEntityRevisionInTx(_param0 *sql.Tx, _param1 *ShEntityRevision) (*ShEntityRevision, error) {
	ret := _m.ctrl.Call(_m, "AddEntityRevisionInTx", _param0, _param1)
	ret0, _ := ret[0].(*ShEntityRevision)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockShStoreRecorder) AddEntityRevisionInTx(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddEntityRevisionInTx", arg0, arg1)
}

func (_m *MockShStore) GetRevisionsSince(start_from *ShEntityRevision) (int64, []*ShEntityRevision, error) {
	ret := _m.ctrl.Call(_m, "GetRevisionsSince", start_from)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].([]*ShEntityRevision)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockShStoreRecorder) GetRevisionsSince(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetRevisionsSince", arg0)
}

func (_m *MockShStore) GetDataStore() DataStore {
	ret := _m.ctrl.Call(_m, "GetDataStore")
	ret0, _ := ret[0].(DataStore)
	return ret0
}

func (_mr *_MockShStoreRecorder) GetDataStore() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetDataStore")
}

func (_m *MockShStore) Begin() (*sql.Tx, error) {
	ret := _m.ctrl.Call(_m, "Begin")
	ret0, _ := ret[0].(*sql.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockShStoreRecorder) Begin() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Begin")
}
